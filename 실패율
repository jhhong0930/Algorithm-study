import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.lang.Math;
import java.util.HashMap;
import java.util.Map;
import java.util.List;


class Solution {
   
    public int[] solution(int N, int[] stages) {
        
        ArrayList<Integer> list = new ArrayList<>();       
        Map<Integer,Double> fails = new HashMap<>();        
        int people = stages.length;
        int[] ans = new int[N];
        
      
        for(int i =0; i<people; i++){
            list.add(stages[i]);            
        }
        
        for(int i=1; i<=N; i++){
            int peopleCount=0;
            int clearPeople=Collections.frequency(list, i);
            for(int k=0; k<people; k++){
                if(i<=stages[k]){
                peopleCount+=1;
                }     
            }            
            if(peopleCount==0){
             fails.put(i,(double)0);   
            }else {
            fails.put(i,(double)clearPeople/peopleCount);            
            }    
        }
        
        List<Integer> keySetList = new ArrayList<>(fails.keySet());
        Collections.sort(keySetList, (o1, o2) -> (fails.get(o2).compareTo(fails.get(o1))));
      
        for(int i=0; i<keySetList.size();i++){
            ans[i]=keySetList.get(i);
        }
        
        int[] answer = ans;
        return answer;
    }
}
